
// MIXINS

// Standard mixins and functions to help make life easier



// ==========================================================================
// GRID MIXINS
// ==========================================================================

$one_col: (100% - ($gutter_width*($cols - 1))) / $cols;
 
@function grid-width($num) {
    @return ($one_col * $num) + ($gutter_width * ($num - 1));
}



// Grid Col - produces CSS selector for a single grid col/unit based on input provided
@function grid-col($column,$nColumn,$sPrepend) {
    @if ($cols % $nColumn == 0) {
        @return "."#{$sPrepend}"size1of"#{$cols/$nColumn}",.#{$sPrepend}"#{$column}"columns";
    } @else if ($nColumn == 8) {
        @return ".#{$sPrepend}size2of3,.#{$sPrepend}"#{$column}"columns";
    } @else if ($nColumn == 9) {
        @return ".#{$sPrepend}size3of4,.#{$sPrepend}"#{$column}"columns";
    } @else {
        @return ".#{$sPrepend}"#{$column}"columns";   
    } 
}

// Returns a CSS selector string for all grid classes to be used in _grid.scss
@function grid-set() {
    
    $count: 1;
    $selectorString: "";
    @each $col in $cols_as_string {
        @if ($count == 1) {
           $selectorString: $selectorString + "#{grid-col($col,$count,'')}"; 
       } @else {
            $selectorString: $selectorString + ",#{grid-col($col,$count,'')}";
       }
        $count: $count + 1;
    }
    @return $selectorString;
}


@mixin grid-span($cols) {
    width: grid-width($cols);
    margin-left: $gutter_width; /* equal to 20px at 1024px */
    float: left;
    min-height: 1px;
    clear: none;
}


// ==========================================================================
// HELPERS
// ==========================================================================

// Clear fix
@mixin clearfix {
    zoom: 1; 
    
    &:before { 
        content: ""; 
        display: table;     
    }

    &:after {
        content: ""; 
        display: table; 
        clear: both; 
    }
}


// Font Size
@mixin fsize($pxval, $baseline : $baseFontSize) {
    font-size: ($pxval / $baseline) * 100%
}

// Relative Size
@function rsize($pxval, $baseline : $baseFontSize) {
    @return ($pxval/$baseline) + em;
}



// Mixin for selection markup
@mixin selection($background, $color, $element:false) {
    @if($element) {
        &::-moz-selection{ background:$background; color:$color; text-shadow:none; }
        &::selection { background:$background; color:$color; text-shadow:none; }
    } @else {
        ::-moz-selection{ background:$background; color:$color; text-shadow:none; }
        ::selection { background:$background; color:$color; text-shadow:none; }
    }
}

// Mixin for reset list
@mixin list-reset {
    list-style: none;
    margin: 0;
    padding: 0;
}

// Mixin for placeholder styling
@mixin placeHolder($color) {
    &::-webkit-input-placeholder { color:$color; }
    &:-moz-placeholder { color:$color; }
}

// Webkit-style focus
@mixin tab-focus {
    outline: thin dotted #333;
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}



// ==========================================================================
// MEDIA QUERY INLINE
// ==========================================================================

@mixin respond-to($media) {

    @if ($bIE == true) {
        // Check if we're IE. If so then just return the content sans-media query
        @content;
    } @else {
        // Return the appropriate MQ declaration for modern browsers
        @if $media == tiny {
            @media only screen and (min-width: $break-tiny) { @content; }
        }
        @else if $media == small {
            @media only screen and (min-width: $break-small) { @content; }
        }
        @else if $media == medium {
            @media only screen and (min-width: $break-medium) { @content; }
        }
        @else if $media == large {
            @media only screen and (min-width: $break-large) { @content; }
        }
        @else if $media == xlarge {
            @media only screen and (min-width: $break-xlarge) { @content; }
        }
    }
}



// ==========================================================================
// TEXTURE
// ==========================================================================


// ARROWS
// ==========================================================================

// 	
//  $direction: top, left, right, bottom, top-left, top-right, bottom-left, bottom-right
// 	$color: hex, rgb or rbga
// 	$size: px or em
//  
// 	@example
// 	.element{
//  	 @include arrow(top, #000, 50px);   
// 	}
//

@mixin arrow($direction, $color, $size){
    display: block;
    height: 0;
    width: 0;
    
    @if $direction == 'top' {
        border-left: $size solid transparent;
    	border-right: $size solid transparent;
    	border-bottom: $size solid $color;
    } @else if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
    	border-left: $size solid $color;
    } @else if $direction == 'bottom' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    } @else if $direction == 'left' {
        border-top: $size solid transparent;
    	border-right: $size solid $color;
    	border-bottom: $size solid transparent;
    } @else if $direction == 'top-left' {
        border-top: $size solid $color; 
        border-right: $size solid transparent;	
    } @else if $direction == 'top-right' {
        border-top: $size solid $color; 
        border-left: $size solid transparent;
    } @else if $direction == 'bottom-left' {
        border-bottom: $size solid $color; 
        border-right: $size solid transparent;	
    } @else if $direction == 'bottom-right' {
        border-bottom: $size solid $color; 
        border-left: $size solid transparent;
    }
}